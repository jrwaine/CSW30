-Rom
	0 => "000101100000101000", -- Carrega R3 (o registrador 3) com o valor 5
        1 => "000110000001000000", -- Carrega R4 com 8
        2 => "000010100000000111", -- Copia R0 para R5 (zera R5)
        3 => "000010101100000000", -- Soma R5 com R3 e guarda em R5
        4 => "000010110000000000", -- Soma R5 com R4 e guarda em R5
        5 => "000110100000001001", -- Subtrai um de R5 e guarda em R5
        6 => "000010110000000001", -- Comparação de R5 com R4 (Subtrai R4 de R5)
        7 => "010000010000011000", -- Testa se salta mas não salta
        8 => "000010110000000001", -- Comparação de R5 com R4 (Subtrai R4 de R5)
        9 => "010000010000011000", -- Testa e salta para posicao 19 PC+8
        10 =>"000000000000000000", --
	11 =>"000000000000000000", 
        12 =>"000000000000000000",
        13 =>"000000000000000000",
        14 =>"000000000000000000",
        15 =>"000000000000000000",  
	16 =>"000000000000000000",
	17 =>"000000000000000000", 
	18 =>"000000000000000000",
        19 =>"110100101000000111", -- salta para 20
        20 =>"000001110100000111", -- Copia R5 para R3
	21 =>"111100000000000010", -- Salta para a terceira instrução desta lista (R5 <= R3+R4)
		

-ucrtl_regbk

cc <= instr_s(6 downto 3) when opcode = "0100" or opcode = "1100" or opcode = "0101" or opcode = "1101" 
			  else "1111";

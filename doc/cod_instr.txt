ISA: Infineon C166 com 18 bits


PALAVRA DO uPROC: 16 bits


REGISTRADORES:
    R0: constante 0 (não pode ser alterado)
    R1-R7: uso genérico

FLAGS:
    Z: Zero; N: Negativo; C: Carry

ESPECIFICAÇÃO DAS OPERAÇÕES DA ULA (ULA_func):
    000: soma ([0]+[1])
    001: subtracao ([0]-[1])
    100: primeira entrada ([0])
    101: shift left ([0]<<1)
    110: shift right ([0]>>1)
    111: segunda entrada ([1]) (útil para cópia)
    Sendo que há saídas das três flags conforme o resultado da ULA

CÓDIGOS DE CONDIÇÃO (cc):
    0000: 1=1 (cc_UC - Incondicional)
    0001: Z=1 (cc_Z  - Zero)
    0010: Z=0 (cc_NZ - Não Zero)
    0011: N=1 (cc_N  - Negativo)
    0100: N=0 (cc_NN - Não negativo)
    0101: C=1 (cc_C  - Carry)
    0110: C=0 (cc_NC - Não carry)
    0111: Z=1 (cc_E  - Igual)
    1000: Z=0 (cc_NE - Não igual)
    1001: C=1 (cc_ULT- Sem sinal menor que)
    1010: C|Z=1 (cc_ULE- Sem sinal menor que ou igual)
    1011: C=0   (cc_UGE- Sem sinal maior que ou igual)
    1100: C|Z=0 (cc_UGT- Sem sinal maior que)

FORMATOS DE INSTRUÇÃO
    Formato envolvendo dois registradores:
        Opcode[17-14] ; Reg0 [13-11] ; Reg1 [10-8] ; ULA_func[2-0]
        Opcode = 0000

    Formato envolvendo um registrador e uma constante:
        Opcode[17-14] ; Reg0 [13-11] ; #8data [10-3] ; ULA_func[2-0]
        Opcode = 0001 (Reg0 <= Reg0 (ULA_func) #8data)

    Formato de branch/jps com regs:
        Opcode[17-14] ; Reg0 [10-8] ; cc [6-3] ; ULA_func[2-0]
        
        Rel.: Opcode = 0100 -> se cc: PC <= PC + Reg0; senão: PC <= PC+1)
              ULA_func = 000
        Abs.: Opcode = 1100 -> se cc: PC <= Reg0; senão: PC <= PC+1)
              ULA_func = 111
            
    Formato do branch/jump com constante:
        Opcode[17-14] ; #7maddr [13-7] ; cc [6-3] ; ULA_func[2-0]

        Rel.: Opcode = 0101 -> (se cc: PC <= PC+7maddr; senão: PC <= PC+1)
              ULA_func = 000 
        Abs.: Opcode = 1101 -> (se cc: PC <= #7maddr; senão: PC <= PC+1)
              ULA_func = 111
    
    Formado de leitura/escrita RAM:
        Opcode[17-14] ; Reg0 [13-11] ; Reg1 [10-8] ; ULA_func[2-0]
        
        LW: Opcode = 0010 -> Reg0 <= [Reg1]
            ULA_func = 111
        SW: Opcode = 0011 -> [Reg1] <= Reg0
            ULA_func = 100

INSTRUÇÕES DA ISA UTILIZADAS:
    ADD Rw, Rw          (pg. 41)    (Ex.: 02B00 - Soma R5 com R3 e guarda em R5)
    ADDB reg, #data8    (pg. 42)    (Ex.: 06040 - Carrega R4 com 8)
    SUB Rw, Rw          (pg. 125)   (Ex.: 02B01 - Subtrai R3 de R5 e guarda em R5)
    SUBB reg, #data8    (pg. 126)   (Ex.: 06809 - Subtrai um de R5 e guarda em R5)
    MOV Rw, Rw          (pg. 95)    (Ex.: 01D07 - Copia R5 para R3)
    JMPA cc, caddr      (pf. 89)    (Ex.: 3418F - PC <= 3 se cc_Z)
    JMPI cc, [Rw]       (pg. 90)    (Ex.: 30307 - PC <= R7 se cc_UC)
    JMPR cc, rel        (pg. 91)    (Ex.: 34307 - PC <= PC+R7 se cc_UC)